# -*- coding: utf-8 -*-
"""SVMwithHOG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/130XidY1zzpGySNmi7evuuCET9-dQexPf

Importing Important libraries
"""

import numpy as np # linear algebra
import json
from matplotlib import pyplot as plt
from skimage import color
from skimage.feature import hog
from sklearn import svm
from sklearn.metrics import classification_report,accuracy_score

"""Imput the existing dataset"""

f = open(r'....') #no file has been input due to lack of a training set thus this code does not work at the moment because we do not have sufficient data to train the ML algorithm
dataset = json.load(f)
f.close()

dataset.keys()

"""Give graphical coordinates to images from the dataset"""

data = np.array(dataset['data']).astype('uint8')
img_length = 80
data = data.reshape(-1,3,img_length,img_length).transpose([0,2,3,1])

plt.imshow(data[51])

"""Convert image to grey scale"""

data_gray = [ color.rgb2gray(i) for i in data]
plt.imshow(data_gray[51])

"""Creating HOG of the image"""

ppc = 16
hog_images = []
hog_features = []
for image in data_gray:
    fd,hog_image = hog(image, orientations=8, pixels_per_cell=(ppc,ppc),cells_per_block=(4, 4),block_norm= 'L2',visualise=True)
    hog_images.append(hog_image)
    hog_features.append(fd)

plt.imshow(hog_images[51])

labels =  np.array(dataset['labels']).reshape(len(dataset['labels']),1)

"""Fitting a simple SVM classifier to the data"""

clf = svm.SVC()
hog_features = np.array(hog_features)
data_frame = np.hstack((hog_features,labels)) #here labels are defined in the training dataset where the faults are labelled cracks, cuts, scratches, etc.
np.random.shuffle(data_frame)

percentage = 80   #only 80% of the initial data is being used to train the classifier, rest 20% is used later to test the accuracy of the trained algorithm
partition = int(len(hog_features)*percentage/100)

x_train, x_test = data_frame[:partition,:-1],  data_frame[partition:,:-1]
y_train, y_test = data_frame[:partition,-1:].ravel() , data_frame[partition:,-1:].ravel()

clf.fit(x_train,y_train)

y_pred = clf.predict(x_test)

"""Using the remaining 20% data (y_test) and comparing it woth predicted labels (y_pred) to determine accuracy"""

print("Accuracy: "+str(accuracy_score(y_test, y_pred)))
print('\n')
print(classification_report(y_test, y_pred))print("Accuracy: "+str(accuracy_score(y_test, y_pred)))
print('\n')
print(classification_report(y_test, y_pred))